import sys
import time
import logging
import pygame
import threading
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import QTimer, QThread, pyqtSignal, pyqtSlot
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                             QPushButton, QLineEdit, QTextEdit, QComboBox, QFormLayout, QCheckBox)
from PyQt5.QtGui import QFont
from pocketoptionapi.stable_api import PocketOption
from concurrent.futures import ThreadPoolExecutor
from tradingview_ta import TA_Handler, Interval

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame mixer
pygame.mixer.init()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(message)s')

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã, –∞–∫—Ü–∏–∏ –∏ —Ç.–¥.)
Symbol = [
    '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É', 'EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 'USDCAD', 'USDCHF', 'NZDUSD', 'EURJPY', 'EURGBP', 'GBPJPY',
    'EURAUD', 'AUDJPY', 'CADJPY', 'CHFJPY', 'AUDCAD', 'NZDJPY', 'AUDNZD', 'USDSGD', 'EURCHF', 'EURCAD',
    'GBPCHF', 'GBPAUD', 'NZDCAD', 'USDHKD', 'USDZAR', 'USDTRY', 'USDMXN', 'USDNOK', 'USDSEK', 'USDPLN',
    'EURUSD_otc', 'GBPUSD_otc', 'USDJPY_otc', 'AUDUSD_otc', 'USDCAD_otc', 'USDCHF_otc', 'NZDUSD_otc', 'EURJPY_otc',
    'EURGBP_otc', 'GBPJPY_otc',
    'EURAUD_otc', 'AUDJPY_otc', 'CADJPY_otc', 'CHFJPY_otc', 'AUDCAD_otc', 'NZDJPY_otc', 'AUDNZD_otc', 'USDSGD_otc',
    'EURCHF_otc', 'EURCAD_otc',
    'GBPCHF_otc', 'GBPAUD_otc', 'NZDCAD_otc', 'USDHKD_otc', 'USDZAR_otc', 'USDTRY_otc', 'USDMXN_otc', 'USDNOK_otc',
    'USDSEK_otc', 'USDPLN_otc'
]

def play_sound():
    try:
        pygame.mixer.music.load(r'C:\Users\Rufus\Downloads\race-countdown-beeps-fast-01-sound-effect-4132081.mp3')
        pygame.mixer.music.play()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: {str(e)}")

class ApiWorker(QThread):
    update_signal_result = pyqtSignal(str, object, float)

    def __init__(self, api, selected_symbol, period):
        super().__init__()
        self.api = api
        self.selected_symbol = selected_symbol
        self.period = period

    def run(self):
        try:
            if self.api and self.api.check_connect():
                balance = self.api.get_balance()
                self.update_signal_result.emit(self.selected_symbol, None, balance)
            else:
                self.update_signal_result.emit(self.selected_symbol, None, 0.0)
        except Exception as e:
            self.update_signal_result.emit(self.selected_symbol, None, 0.0)
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")

class TradingBotGUI(QMainWindow):
    log_signal = pyqtSignal(str)  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞

    def __init__(self):
        super().__init__()
        self.setWindowTitle("trading bot POCKET OPTION")
        self.setGeometry(100, 100, 1000, 600)
        self.setWindowIcon(QIcon(r"C:\Project.py\pythonProject\PocketOptionAPI\pocket_option.png"))  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É
        self.balance_label = QLabel("–ë–∞–ª–∞–Ω—Å: üíµ")
        self.balance_label.setFont(QFont("Arial",12))
        self.setup_ui()
        self.timer = None
        self.api = None
        self.period = 60  # –ü–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.api_worker = None
        self.executor = ThreadPoolExecutor(max_workers=5)

        self.log_signal.connect(self.log_text.append)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∫ –ª–æ–≥–∞–º

    def setup_ui(self):
        main_widget = QWidget()
        self.setCentralWidget(main_widget)

        main_layout = QVBoxLayout()
        main_widget.setLayout(main_layout)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        settings_group = QWidget()
        settings_layout = QFormLayout()
        settings_group.setLayout(settings_layout)

        self.demo_ssid_input = QLineEdit()
        settings_layout.addRow("SSID:Demo", self.demo_ssid_input)

        self.real_ssid_input = QLineEdit()
        settings_layout.addRow("SSID:Real", self.real_ssid_input)

        main_layout.addWidget(settings_group)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        main_layout.addWidget(self.balance_label)

        # –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        trading_layout = QHBoxLayout()

        left_panel = QWidget()
        left_layout = QVBoxLayout()
        left_panel.setLayout(left_layout)

        middle_panel = QWidget()
        middle_layout = QVBoxLayout()
        middle_panel.setLayout(middle_layout)

        right_panel = QWidget()
        right_layout = QVBoxLayout()
        right_panel.setLayout(right_layout)

        trading_layout.addWidget(left_panel)
        trading_layout.addWidget(middle_panel)
        trading_layout.addWidget(right_panel)

        main_layout.addLayout(trading_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º CheckBox –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.auto_trade_checkbox = QCheckBox("–ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ üîé")
        left_layout.addWidget(self.auto_trade_checkbox)
        # –î–æ–±–∞–≤–ª—è–µ–º ComboBox –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        self.interval_combo = QComboBox()
        self.interval_combo.addItems([
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª TradingView", "1m", "5m", "15m", "30m", "1h",
            "2h", "4h", "1d", "1W", "1M"
        ])
        left_layout.addWidget(self.interval_combo)

        self.coin_combo = QComboBox()
        self.coin_combo.addItems(Symbol)
        left_layout.addWidget(self.coin_combo)

        self.trade_input = QLineEdit()
        self.trade_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏")
        left_layout.addWidget(self.trade_input)

        self.expiry_combo = QComboBox()
        self.expiry_combo.addItems(
            ["–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏", "5s", "15s", "30s", "1m", "2m", "3m", "5m", "10m", "15m", "30m", "1h"])
        left_layout.addWidget(self.expiry_combo)

        self.buy_button = QPushButton("–ö—É–ø–∏—Ç—å")
        self.buy_button.clicked.connect(self.buy)
        left_layout.addWidget(self.buy_button)

        self.sell_button = QPushButton("–ü—Ä–æ–¥–∞—Ç—å")
        self.sell_button.clicked.connect(self.sell)
        left_layout.addWidget(self.sell_button)

        # –í–∏–¥–∂–µ—Ç—ã –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        right_layout.addWidget(self.log_text)

        self.start_bot_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        self.start_bot_button.clicked.connect(self.start_bot)
        right_layout.addWidget(self.start_bot_button)

        self.stop_bot_button = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
        self.stop_bot_button.clicked.connect(self.stop_bot)
        right_layout.addWidget(self.stop_bot_button)

    def start_timer(self):
        if self.timer is None:
            self.timer = QTimer(self)
            self.timer.timeout.connect(self.update_signal)
            self.timer.start(5000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            self.log_text.append("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    def stop_timer(self):
        if self.timer is not None:
            self.timer.stop()
            self.timer = None
            self.log_text.append("–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_expirations(self):
        selected_expirations = self.expiry_combo.currentText()
        if selected_expirations == "5s":
            return 5
        elif selected_expirations == "15s":
            return 15
        elif selected_expirations == "30s":
            return 30
        elif selected_expirations == "1m":
            return 60
        elif selected_expirations == "2m":
            return 120
        elif selected_expirations == "3m":
            return 180
        elif selected_expirations == "5m":
            return 300
        elif selected_expirations == "10m":
            return 600
        elif selected_expirations == "15m":
            return 900
        elif selected_expirations == "30m":
            return 1800
        elif selected_expirations == "1h":
            return 3600
        return 60  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def buy(self):
        self.executor.submit(self._buy, 'call')

    def sell(self):
        self.executor.submit(self._buy, 'put')

    def _buy(self, action, symbol=None):
        try:
            if not self.api or not self.api.check_connect():
                self.log_signal.emit("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
                return

            asset = symbol or self.coin_combo.currentText()
            amount_text = self.trade_input.text()
            if not amount_text:
                self.log_signal.emit("–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                return

            try:
                amount = float(amount_text)
            except ValueError:
                self.log_signal.emit("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏")
                return

            duration = self.get_expirations()

            try:
                buy_info = self.api.buy(amount=amount, active=asset, expirations=duration, action=action)
                if not isinstance(buy_info, dict):
                    return
            except Exception as e:
                self.log_signal.emit(f"{action.capitalize()}: (False, None) –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return

            time.sleep(duration + 5)

            try:
                result = self.api.check_win(buy_info["id"])
                if not isinstance(result, dict):
                    self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {action}: result –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º")
                    return
                self.log_signal.emit(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            except KeyError:
                self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {action}: 'id' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ buy_info")
                return

            new_balance = self.api.get_balance()
            self.log_signal.emit(f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {action}: {str(e)}")

    def start_bot(self):
        try:
            demo_ssid = self.demo_ssid_input.text()
            real_ssid = self.real_ssid_input.text()
            if demo_ssid and '"isDemo":1' in demo_ssid:
                self.log_text.append(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Demo SSID: {demo_ssid}")
                ssid = demo_ssid
            elif real_ssid and '"isDemo":0' in real_ssid:
                self.log_text.append(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Real SSID: {real_ssid}")
                ssid = real_ssid
            else:
                self.log_text.append("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π SSID –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä isDemo")
                return

            self.api = PocketOption(ssid)
            self.api.connect()
            time.sleep(5)
            if self.api.check_connect():
                self.log_text.append("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PocketOption API —É—Å–ø–µ—à–Ω–æ")
                self.start_timer()
                self.update_signal()  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞

                if self.auto_trade_checkbox.isChecked():
                    self.trading_thread = threading.Thread(target=self.trading_loop)
                    self.trading_thread.start()

            else:
                self.log_text.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PocketOption API")

        except Exception as e:
            self.log_text.append(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")

    def stop_bot(self):
        self.stop_timer()
        self.log_text.append("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if self.api and self.api.check_connect():
            self.api.disconnect()

    def update_signal(self):
        selected_symbol = self.coin_combo.currentText()
        self.api_worker = ApiWorker(self.api, selected_symbol, self.period)
        self.api_worker.update_signal_result.connect(self.handle_api_response)
        self.api_worker.start()

    @pyqtSlot(str, object, float)
    def handle_api_response(self, selected_symbol, candles, balance):
        self.log_text.clear()  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.log_text.append(f"üì∂{selected_symbol}")
        self.balance_label.setText(f"–ë–∞–ª–∞–Ω—Å:üíµ{balance}")
        self.log_text.append(f"–ë–∞–ª–∞–Ω—Å:üíµ{balance}")

    def trading_loop(self):
        while self.auto_trade_checkbox.isChecked():
            self.log_text.append('===================–ü–û–ò–°–ö –°–ò–ì–ù–ê–õ–ê====================')
            for symbol in Symbol:
                if symbol == '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É':
                    continue
                try:
                    data = self.get_tradingview_data(symbol)
                    if data['RECOMMENDATION'] == 'STRONG_BUY':
                        self.log_text.append(f"{symbol} Buy")
                        self._buy('call', symbol)
                    elif data['RECOMMENDATION'] == 'STRONG_SELL':
                        self.log_text.append(f"{symbol} Sell")
                        self._buy('put', symbol)
                    time.sleep(1)
                except Exception as e:
                    self.log_text.append(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {str(e)}")

    def get_tradingview_data(self, symbol):
        interval = self.get_tradingview_interval()
        handler = TA_Handler(
            symbol=symbol,
            screener="forex",
            exchange="FX_IDC",
            interval=interval
        )
        return handler.get_analysis().summary

    def get_tradingview_interval(self):
        interval_map = {
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª TradingView": Interval.INTERVAL_1_HOUR,  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "1m": Interval.INTERVAL_1_MINUTE,
            "5m": Interval.INTERVAL_5_MINUTES,
            "15m": Interval.INTERVAL_15_MINUTES,
            "30m": Interval.INTERVAL_30_MINUTES,
            "1h": Interval.INTERVAL_1_HOUR,
            "2h": Interval.INTERVAL_2_HOURS,
            "4h": Interval.INTERVAL_4_HOURS,
            "1d": Interval.INTERVAL_1_DAY,
            "1W": Interval.INTERVAL_1_WEEK,
            "1M": Interval.INTERVAL_1_MONTH
        }
        selected_interval = self.interval_combo.currentText()
        return interval_map.get(selected_interval, Interval.INTERVAL_1_HOUR)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    try:
        window = TradingBotGUI()
        window.setStyleSheet("""
                QMainWindow {
                    background-color: #2c3e50; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ */
                    color: #ecf0f1; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
                }
                QLabel, QTextEdit {
                    color: #ecf0f1; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è QLabel –∏ QTextEdit */
                    font-size: 12px; /* –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */
                }
                QPushButton {
                    background-color: #3498db; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è QPushButton */
                    color: white; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è QPushButton */
                    border: none; /* –ë–µ–∑ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è QPushButton */
                    padding: 8px 12px; /* –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –¥–ª—è QPushButton */
                    border-radius: 3px; /* –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã –¥–ª—è QPushButton */
                    font-size: 12px; /* –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */
                }
                QPushButton:hover {
                    background-color: #2980b9; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è QPushButton –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
                }
                QLineEdit, QComboBox {
                    background-color: #34495e; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è QLineEdit –∏ QComboBox */
                    color: #ecf0f1; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è QLineEdit –∏ QComboBox */
                    border: 1px solid #7f8c8d; /* –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è QLineEdit –∏ QComboBox */
                    padding: 5px; /* –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –¥–ª—è QLineEdit –∏ QComboBox */
                    font-size: 12px; /* –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */
                }
                QTextEdit {
                    background-color: #2c3e50; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è QTextEdit */
                    color: #ecf0f1; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è QTextEdit */
                    font-size: 12px; /* –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */
                }
            """)
        window.show()
        sys.exit(app.exec_())
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)





























































